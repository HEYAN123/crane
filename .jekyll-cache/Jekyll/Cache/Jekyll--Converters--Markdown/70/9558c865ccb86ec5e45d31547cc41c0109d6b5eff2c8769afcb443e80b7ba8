I"
<ul id="markdown-toc">
  <li><a href="#前言" id="markdown-toc-前言">前言</a></li>
  <li><a href="#接下来看生成器函数的使用" id="markdown-toc-接下来看生成器函数的使用">接下来看生成器函数的使用</a></li>
</ul>

<h2 id="前言">前言</h2>

<ul>
  <li>
    <p>先看一下js中的未声明或未赋值的结果</p>
  </li>
  <li>
    <p>未声明：</p>
  </li>
</ul>

<p><img src="../../../static/generator_1.PNG" alt="avatar" /></p>

<ul>
  <li>未赋值：</li>
</ul>

<p><img src="../../../static/generator_2.PNG" alt="avatar" /></p>

<ul>
  <li>当执行一个表达式：var a = 12; 右侧未返回值时变量处于已声明未赋值状态。</li>
</ul>

<p><img src="../../../static/generator_3.PNG" alt="avatar" /></p>

<h2 id="接下来看生成器函数的使用">接下来看生成器函数的使用</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">gen</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">before a</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">111</span><span class="dl">'</span><span class="p">,</span> <span class="nx">that</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 此处t.next(1);停止 未返回值，a没有被赋值</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="nx">a</span><span class="p">);</span> <span class="c1">// a的值由yield表达式返回的值决定，而这里【yield console.log('111')】返回的值由t.next(2)中的入参决定，就是2,此时a被赋值</span>
    <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">222</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// t.next(2);停止</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">333</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// t.next(3);停止</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">,</span> <span class="nx">c</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">444</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// t.next(4);停止</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">,</span> <span class="nx">d</span><span class="p">);</span> <span class="c1">// t.next(5);</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">();</span>
<span class="c1">// 该函数不执行，返回一个指向内部状态的指针对象，也就是遍历器对象</span>


<span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="c1">// 打印：before a 111 undefined</span>
<span class="c1">// 并且【next方法】返回一个对象：{value: undefined, done: false} 第一次调用next传递的参数无效</span>
<span class="c1">// 此时指针指到执行完第一个yield：yield console.log('111');</span>
<span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="c1">// 打印：a 2 222</span>
<span class="c1">// 并且【next方法】返回一个对象：{value: undefined, done: false} 此处调用next传递的参数作为了上次yield表达式返回的值</span>
<span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="c1">// 打印：b 3 333</span>
<span class="c1">// 并且【next方法】返回一个对象：{value: undefined, done: false} 此处调用next传递的参数作为了上次yield表达式返回的值</span>
<span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="c1">// 打印：c 4 444</span>
<span class="c1">// 并且【next方法】返回一个对象：{value: undefined, done: false} 此处调用next传递的参数作为了上次yield表达式返回的值</span>


<span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="c1">// 打印：d 5</span>
<span class="c1">// next返回{value: undefined, done: true} 这一步会直接进行到结尾</span>
<span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
<span class="c1">// next返回{value: undefined, done: true}</span>
<span class="nx">t</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
<span class="c1">// next返回{value: undefined, done: true}</span>

</code></pre></div></div>
:ET